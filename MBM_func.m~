function MBM_func()
% 
% Trang Cao, Neural Systems and Behaviour Lab, Monash University, 2022.

addpath('func')
addpath(fullfile('utils','gifti-matlab'))
addpath(fullfile('utils','PALM-master'))
addpath(fullfile('utils','fdr_bh'))

rng(2); % set the default seed for random generation to ensure the results are reproducible.

N_EM = 150; % number of eigenmodes

N_nu = 5000; % number of permutations

thres = 0.05; % statistical threshold to be considered significant

% List of paths of input maps expected as GIFTI files. The paths should
% start from subdirectories of the list file directory.
map_list_dir = ('data'); % directory
map_list_file = ('map_list.txt'); % filename

% Statistical test
test = 'twosample'; % statistical test supported: 'onesample' one-sample t-test, 'twosample' two-sample t-test, 'onewayANOVA' one-way ANOVA
indicatorMatrix = readmatrix(fullfile('data','G_mat.txt'));   % group indicator matrix [m subjects x k groups]: each column is a group and 1 indicates a subject in a group

% A mask (row or column vector) given in a text file with values 1 or 0 indicating the vertices of the maps to be used or removed
mask_dir = ('data'); % directory
maskFile = ('mask_S1200.L.midthickness_MSMAll.32k_fs_LR.txt'); % filename

% Eigenmodes given in a text file (in columns)
eig_dir = ('data'); % directory
eigFile = ('evec_501_masked_S1200.L.midthickness_MSMAll.32k_fs_LR.txt'); % filename

% If the p-values are below pThr, these are refined further using a tail
% approximation from the Generalised Pareto Distribution (GPD).
pThr = 0.1;

% Option ('true' or 'false') to correct multiple test with fdr
opt_fdr = false;

% For plotting                                             
light_gray = [0.5 0.5 0.5]; % define color
light_green = [0.35 0.65 0.35]; % define color
vtk_dir = 'data'; % directory of the surface file
vtk_file = 'fsLR_32k_midthickness-lh.vtk'; % filename of the surface
hemisphere = 'lh'; % 'lh' or 'rh to visialise left or right hemisphere
font_name = 'Arial'; % font for labels
font_size = 15;
N_pat = 6; % number of most influential modes to be plot

%% -------------------------------<< INPUT >>------------------------------
% read input maps [m subjects x n independent measurements]
input_maps = read_input_map(map_list_dir,map_list_file);

if size(indicatorMatrix,1) ~= size(input_maps,1)
    error('Error. Numbers of subjects in the indicator matrix and input maps are different.');
end

% read mask
mask = readmatrix(fullfile(mask_dir,maskFile));

if size(mask,1) ~= size(input_maps,2) & size(mask,2) ~= size(input_maps,2)
    error('Error. Mask size is different from map size.');
elseif size(mask,1) == size(input_maps,2)
    mask = mask';
end

% remove the unused vertices, e.g., the medial wall
input_maps = input_maps(:,mask==1);
[N_sub,N_vertice] = size(input_maps);  % number of subjects and number of vertices after removing the medial wall

% statistical map
statMap = statMap_cal(input_maps,indicatorMatrix,test);

% read and normalize the eigenmodes
eig = eig_norm(eig_dir,eigFile,mask,N_EM);

%% -----------------------------<< ANALYSIS >>-----------------------------
% eigenmode decomposision
beta = eigen_decomp(statMap,eig);

% permutation tests
statMap_null = zeros(N_nu, size(input_maps,2)); % preallocation space
for i=1:N_nu
    
    if test == 'onesample'
        
        % null input maps
        input_maps_null = input_maps.*sign(rand(N_sub,1)-0.5);
        
    else
        
        %suffling the labels of the groups
        nu_in = randperm(N_sub);
        
        % null input maps
        input_maps_null = input_maps(nu_in,:);
        
    end
    
    % statistical map of the null inputs
    statMap_null(i,:) = statMap_cal(input_maps_null,indicatorMatrix,test);
    
end

% eigenmode decomposision of the null statistical map
beta_null = eigen_decomp(statMap_null,eig);

% calculate p-value of the t-map and obtain the thresholded map
for ii=1:N_vertice
    
    [p_statmap(ii), rev_statmap(ii)] = p_val_tail_est(statMap_null(:,ii), statMap(ii), pThr); % rev_statmap with value "false" or "true" indicates the observed value is on the right or left tail of the null distribution.
    
end
% correction with fdr if wishing
if opt_fdr == 1
    [h, crit_p, adj_ci_cvrg, p_statmap] = fdr_bh(p_statmap,thres,'pdep');
end

% thresholded map
thresMap = sign(statMap);
thresMap(p_statmap>thres) = 0;

% calculate p-value of the beta spectrum and identify the significant betas
for ii=1:N_EM
    
    [pBeta(ii), revBeta(ii)] = p_val_tail_est(beta_null(:,ii), beta(ii), pThr); % revBeta with value "false" or "true" indicates the observed value is on the right or left tail of the null distribution.
    
end
% correction with fdr if wishing
if opt_fdr == 1
    [h, crit_p, adj_ci_cvrg, pBeta] = fdr_bh(pBeta,thres,'pdep');
end

% significant betas
beta_sig = beta;
beta_sig(pBeta>thres) = 0;
[beta_sorted, betaOrder] = sort(abs(beta_sig),'descend');

reconMap = beta_sig*eig';  % sigificant patterns
% save(fullfile('data',['MBM_demo.mat']),'statMap','p_statmap','thresMap','beta','pBeta','beta_sig','reconMap');
