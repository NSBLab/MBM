%              ********************************************
%         ********************************************************
%         *               Mode-based Morphometry                 *
%         *                       Trang Cao                      *
%         *           Neural Systems and Behaviour Lab           *
%         *                   Monash University                  *
%         *                         2022                         *
%         ********************************************************
%% ---------------------------<< INTRODUCTION >>---------------------------
% Analysing statistical maps using MBM

%% --------------------------<< INITIALIZATION >>--------------------------
clear all
close all

addpath('func')
addpath(fullfile('utils','gifti-matlab'))
addpath(fullfile('utils','PALM-master'))

rng(2); % set the default seed for random generation to ensure the results are reproducible.

N_EM = 150; % number of eigenmodes

N_nu = 5000; %number of permutations

thres = 0.05; %statistical threshold to be considered significant

% input map list. Expect input maps as GIFTI files in the same directory
% with the list file.
map_list_dir = ('/projects/kg98/trangc/HCP339independent'); % directory
map_list_file = ('sub_ID_female_male.txt'); % filename

% statistical test
test = 'twosample'; % statistical test supported: 'onesample' one-sample t-test, 'twosample' two-sample t-test, 'onewayANOVA' one-way ANOVA
indicatorMatrix = readmatrix(fullfile('/projects/kg98/trangc/HCP339independent','G_mat.txt'));   % group indicator matrix [m subjects x k groups]: each column is a group and 1 indicates a subject in a group

% a mask given in a text file with values 1 or 0 indicating the vertices of the maps to be used or removed
mask_dir = ('data'); % directory
maskFile = ('mask_S1200.L.midthickness_MSMAll.32k_fs_LR.txt'); % filename

% eigenmode file
eig_dir = ('data'); % directory
eigFile = ('evec_501_masked_S1200.L.midthickness_MSMAll.32k_fs_LR.txt'); % filename

% If the p-values are below pThr, these are refined further using a tail
% approximation from the Generalised Pareto Distribution (GPD).
pThr = 0.1;

% for plotting
light_gray = [0.5 0.5 0.5]; % define color
light_green = [0.35 0.65 0.35];
vtk_dir = 'data'; % directory of the surface file
vtk_file = 'fsLR_32k_midthickness-lh.vtk'; % filename
hemisphere = 'lh'; % left or right hemisphere
font_name = 'Arial';
font_size = 10;
N_pat = 6; % number of most influent modes to be plot
%% -------------------------------<< INPUT >>------------------------------
% read input maps [m subjects x n independent measurements]
input_maps = read_input_map(map_list_dir,map_list_file);

if size(indicatorMatrix,1) ~= size(input_maps,1)
    error('Error. Numbers of subjects in the indicator matrix and input maps are different.');
end

% read mask
mask = readmatrix(fullfile(mask_dir,maskFile));

if size(mask,1) ~= size(input_maps,2) & size(mask,2) ~= size(input_maps,2)
    error('Error. Mask size is different from map size.');
elseif size(mask,1) == size(input_maps,2)
    mask = mask';
end

% remove the unused vertices, e.g., the medial wall
input_maps = input_maps(:,mask==1);
[N_sub,N_vertice] = size(input_maps);  % number of subjects and number of vertices after removing the medial wall

% statistical map
statMap = statMap_cal(input_maps,indicatorMatrix,test);

% read and normalize the eigenmodes
eig = eig_norm(eig_dir,eigFile,mask,N_EM);

%% -----------------------------<< ANALYSIS >>-----------------------------
% eigenmode decomposision
beta = eigen_decomp(statMap,eig);

% permutation tests
statMap_null = zeros(N_nu, size(input_maps,2)); % preallocation space
for i=1:N_nu
    
    if test == 'onesample'
        
        % null input maps
        input_maps_null = input_maps.*sign(rand(N_sub,1)-0.5);
        
    else
        
        %suffling the labels of the groups
        nu_in = randperm(N_sub);
        
        % null input maps
        input_maps_null = input_maps(nu_in,:);
        
    end
    
    % statistical map of the null inputs
    statMap_null(i,:) = statMap_cal(input_maps_null,indicatorMatrix,test);
    
end

% eigenmode decomposision of the null statistical map
beta_null = eigen_decomp(statMap_null,eig);

% calculate p-value of the t-map and obtain the thresholded map
for ii=1:N_vertice
    
    [p_statmap(ii), rev_statmap(ii)] = p_val_tail_est(statMap_null(:,ii), statMap(ii), pThr); % rev_statmap with value "false" or "true" indicates the observed value is on the right or left tail of the null distribution.
    
end
thresMap = sign(statMap);
thresMap(p_statmap>thres) = 0;

% calculate p-value of the beta spectrum and identify the significant betas
for ii=1:N_EM
    
    [pBeta(ii), revBeta(ii)] = p_val_tail_est(beta_null(:,ii), beta(ii), pThr); % revBeta with value "false" or "true" indicates the observed value is on the right or left tail of the null distribution.
    
end
beta_sig = beta;
beta_sig(pBeta>thres) = 0;
[beta_sorted, betaOrder] = sort(abs(beta_sig),'descend');

reconMap = beta_sig*eig';  % sigificant patterns
% statMap_30mm=statMap;
% p_statmap_30mm=p_statmap;
% rev_statmap_30mm=rev_statmap;
% save(fullfile('paper_figures',['MBM_sex.mat']),'statMap_30mm','p_statmap_30mm','rev_statmap_30mm');
% load(fullfile('paper_figures',['MBM_sex_30mm.mat']));

% restore removed vertices
statMap_nomask = zeros(size(mask))';
statMap_nomask(mask==1) = statMap;

p_gifti.cdata=statMap_nomask;
p_gifti = gifti(p_gifti);
save(p_gifti,fullfile('paper_figures','tmap_sex.func.gii'));
system('module load freesurfer;module load connectome;wb_command -metric-smoothing data/fs_LR-deformed_to-fsaverage.L.sphere.32k_fs_LR.surf.gii paper_figures/tmap_sex.func.gii 12.73983 paper_figures/tmap_sex_30mm.func.gii -fix-zeros');
g_gifti = gifti(fullfile('paper_figures','tmap_sex_30mm.func.gii'));
statMap_nomask_smooth = g_gifti.cdata;

% save(fullfile('paper_figures',['MBM_sex.mat']),'statMap','beta','p_statmap','pBeta', 'rev_statmap', 'revBeta','statMap_nomask','thresMap_nomask','beta_sig','eig_nomask','reconMap_nomask','statMap_nomask_smooth');

%% -----------------------------<< PLOTTING >>-----------------------------

% read surface
[vertices,faces] = read_vtk(fullfile(vtk_dir,vtk_file));
vertices = vertices';
faces = faces';

% define figure model
fig = figure('Position', [200 200 1000 600], 'color', 'w');

% define axis para
factor_x = 1.5;
factor_y = 1.5;
init_x = 0.01;
init_y = 0.02;
num_row = 2;    %No of rows
num_col = 3;    %No of columns
length_x = (0.85 - init_x)/(factor_x*(num_col-1)+1);
length_y = (0.95 - init_y)/(factor_y*(num_row-1)+1);

%% plot tmap

% define axis
ax1 = axes('Position', [init_x init_y+factor_y*length_y length_x length_y]);

patch(ax1, 'Vertices', vertices, 'Faces', faces, 'FaceVertexCData', statMap_nomask, ...
    'EdgeColor', 'none', 'FaceColor', 'interp');

if strcmpi(hemisphere, 'lh')
    view([-90 0]);
elseif strcmpi(hemisphere, 'rh')
    view([90 0]);
end
camlight('headlight')
material dull
colormap(ax1,bluewhitered);
axis off;
axis image;
cc = colorbar('Position',[ax1.Position(1)+ax1.Position(3)*1.05 ax1.Position(2)+ax1.Position(4)*0.2 0.01 ax1.Position(4)*0.6]);

a1 = annotation(fig, 'textbox', [ax1.Position(1), ax1.Position(2)+ax1.Position(4)*1.02, ax1.Position(3), 0.02], 'string', 'a | t-map', 'edgecolor', 'none', ...
    'FontName',font_name,'FontSize',font_size,  'horizontalalignment', 'left');

%% plot thresholded map

% restore removed vertices
thresMap_nomask = zeros(size(mask))';
thresMap_nomask(mask==1) = thresMap;

ax2 = axes('Position', [init_x+length_x*1.25  ax1.Position(2) length_x length_y]);

patch(ax2, 'Vertices', vertices, 'Faces', faces, 'FaceVertexCData', thresMap_nomask, ...
    'EdgeColor', 'none', 'FaceColor', 'interp');
if strcmpi(hemisphere, 'lh')
    view([-90 0]);
elseif strcmpi(hemisphere, 'rh')
    view([90 0]);
end
camlight('headlight')
material dull
colormap(ax2,bluewhitered)
axis off;
axis image;
a2 = annotation(fig, 'textbox', [ax2.Position(1), ax2.Position(2)+ax2.Position(4)*1.02, ax2.Position(3), 0.02], 'string', ' b | thresholded t-map, p_{unc}\leq 0.05', 'edgecolor', 'none', ...
    'FontName',font_name,'FontSize',font_size,  'horizontalalignment', 'left');

%% plot beta spectrum

ax3 = axes('Position', [ax2.Position(1)+ax2.Position(3)*1.3 ax1.Position(2) length_x*2 length_y*0.8],'FontName',font_name,'FontSize',font_size);

bar(ax3,beta,'FaceColor',light_gray,'EdgeColor',light_gray);
hold(ax3,'on');
bar(ax3,beta_sig,'FaceColor',light_green,'EdgeColor',light_green);
hold(ax3, 'off')

xlabel(ax3, '\psi', 'FontName', font_name, 'FontSize', font_size);
ylabel(ax3, '\beta', 'FontName', font_name, 'FontSize', font_size);

legend('non-significant','significant','NumColumns',2)
legend('boxoff')

a3 = annotation(fig, 'textbox', [ax3.Position(1), a2.Position(2), ax3.Position(3), 0.02], 'string', 'c | \beta spectrum', 'edgecolor', 'none', ...
    'FontName',font_name,'FontSize',font_size, 'horizontalalignment', 'left');

%% plot smoothed tmap

% restore removed vertices
statMap_nomask = zeros(size(mask))';
statMap_nomask(mask==1) = statMap;

% define axis
ax6 = axes('Position', [ax1.Position(1) init_y ax1.Position(3) ax1.Position(4)]);

patch(ax6, 'Vertices', vertices, 'Faces', faces, 'FaceVertexCData', statMap_nomask_smooth, ...
    'EdgeColor', 'none', 'FaceColor', 'interp');

if strcmpi(hemisphere, 'lh')
    view([-90 0]);
elseif strcmpi(hemisphere, 'rh')
    view([90 0]);
end
camlight('headlight')
material dull
colormap(ax6,bluewhitered);
axis off;
axis image;
% cc = colorbar('Position',[ax1.Position(1)+ax1.Position(3)*1.05 ax1.Position(2)+ax1.Position(4)*0.2 0.01 ax1.Position(4)*0.6]);

a1 = annotation(fig, 'textbox', [ax6.Position(1), ax6.Position(2)+ax6.Position(4)*1.02, ax6.Position(3), 0.02], 'string', 'd | smoothed t-map', 'edgecolor', 'none', ...
    'FontName',font_name,'FontSize',font_size,  'horizontalalignment', 'left');

%% plot significant patterns
% restore removed vertices
reconMap_nomask = zeros(size(mask))';
reconMap_nomask(mask==1) = reconMap;

ax4 = axes('Position', [ax2.Position(1) init_y ax1.Position(3) ax1.Position(4)],'FontName',font_name,'FontSize',font_size);

patch(ax4, 'Vertices', vertices, 'Faces', faces, 'FaceVertexCData', reconMap_nomask, ...
    'EdgeColor', 'none', 'FaceColor', 'interp');

if strcmpi(hemisphere, 'lh')
    view([-90 0]);
elseif strcmpi(hemisphere, 'rh')
    view([90 0]);
end
camlight('headlight')
material dull
colormap(ax4,bluewhitered);
axis off;
axis image;
% cc = colorbar('Position',[ax4.Position(1)+ax4.Position(3)*1.03 ax4.Position(2) 0.01 ax4.Position(4)*0.8]);

a4 = annotation(fig, 'textbox', [ax4.Position(1), ax4.Position(2)+ax4.Position(4)*1.02, ax4.Position(3), 0.02], 'string', 'e | significant patterns', 'edgecolor', 'none', ...
    'FontName',font_name,'FontSize',font_size,  'horizontalalignment', 'left');

%% plot the most influent pattern
% restore removed vertices
eig_nomask = zeros(size(mask,2),N_pat);
eig_nomask(mask==1,:) = eig(:,betaOrder(1:N_pat)).*sign(beta(betaOrder(1:N_pat)));

% define axis para
factor_x = 1.1;
factor_y = 1.4;
init_x = ax4.Position(1)+ax4.Position(3)*1.1;
num_row = 2;    %No of rows
num_col = ceil(N_pat/2);    %No of columns
length_x = (0.95 - init_x)/(factor_x*(num_col-1)+1);
length_y = (0.4 - init_y)/(factor_y*(num_row-1)+1);

for eig_in = 1:N_pat % influent order of the modes
    
    i = ceil(eig_in/num_col); % row index
    ii = mod(eig_in+num_col-1,num_col)+1; % column index
    ax5 = axes('Position', [init_x+factor_x*length_x*(ii-1) init_y+factor_y*length_y*(num_row-i) length_x length_y],'FontName',font_name,'FontSize',font_size);

    patch(ax5, 'Vertices', vertices, 'Faces', faces, 'FaceVertexCData', eig_nomask(:,eig_in), ...
        'EdgeColor', 'none', 'FaceColor', 'interp');
    
    if strcmpi(hemisphere, 'lh')
        view([-90 0]);
    elseif strcmpi(hemisphere, 'rh')
        view([90 0]);
    end
    camlight('headlight')
    material dull
    colormap(ax5,bluewhitered);
    axis off;
    axis image;
    % cc = colorbar('Position',[ax4.Position(1)+ax4.Position(3)*1.03 ax4.Position(2) 0.01 ax4.Position(4)*0.8]);
    switch eig_in
        case 1
            a5 = annotation(fig, 'textbox', [ax5.Position(1), ax5.Position(2)+ax5.Position(4)*1.2, ax5.Position(3), 0.02], 'string', [num2str(eig_in), 'st'], 'edgecolor', 'none', ...
                'FontName',font_name,'FontSize',font_size,  'horizontalalignment', 'center');
        case 2
            a5 = annotation(fig, 'textbox', [ax5.Position(1), ax5.Position(2)+ax5.Position(4)*1.2, ax5.Position(3), 0.02], 'string', [num2str(eig_in), 'nd'], 'edgecolor', 'none', ...
                'FontName',font_name,'FontSize',font_size,  'horizontalalignment', 'center');
        case 3
            a5 = annotation(fig, 'textbox', [ax5.Position(1), ax5.Position(2)+ax5.Position(4)*1.2, ax5.Position(3), 0.02], 'string', [num2str(eig_in), 'rd'], 'edgecolor', 'none', ...
                'FontName',font_name,'FontSize',font_size,  'horizontalalignment', 'center');
        otherwise
            a5 = annotation(fig, 'textbox', [ax5.Position(1), ax5.Position(2)+ax5.Position(4)*1.2, ax5.Position(3), 0.02], 'string', [num2str(eig_in), 'th'], 'edgecolor', 'none', ...
                'FontName',font_name,'FontSize',font_size,  'horizontalalignment', 'center');
    end
end

a6 = annotation(fig, 'textbox', [ax4.Position(1)+ax4.Position(3), init_y+2.1*length_y*factor_y, length_x*num_col*factor_x, 0.02], 'string', 'f | most influent modes', 'edgecolor', 'none', ...
    'FontName',font_name,'FontSize',font_size,  'horizontalalignment', 'left');
%%
savefig(fig,['paper_figures/Figure_7b_FM_spectra_maps.fig']);
set(fig, 'PaperPositionMode', 'auto')
print(fig, '-djpeg', '-r600', 'paper_figures/Figure_7b_FM_spectra_maps.jpg')